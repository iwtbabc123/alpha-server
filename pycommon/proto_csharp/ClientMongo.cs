// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: client_mongo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Alpha.Server {

  /// <summary>Holder for reflection information generated from client_mongo.proto</summary>
  public static partial class ClientMongoReflection {

    #region Descriptor
    /// <summary>File descriptor for client_mongo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientMongoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJjbGllbnRfbW9uZ28ucHJvdG8SDGFscGhhLnNlcnZlchoMY29tbW9uLnBy",
            "b3RvInMKDkZpbmREb2NSZXF1ZXN0EhMKC2NhbGxiYWNrX2lkGAEgASgFEgoK",
            "AmRiGAIgASgJEhIKCmNvbGxlY3Rpb24YAyABKAkSDQoFcXVlcnkYBCABKAkS",
            "DgoGZmllbGRzGAUgASgJEg0KBWxpbWl0GAYgASgFImMKEFVwZGF0ZURvY1Jl",
            "cXVlc3QSEwoLY2FsbGJhY2tfaWQYASABKAUSCgoCZGIYAiABKAkSEgoKY29s",
            "bGVjdGlvbhgDIAEoCRINCgVxdWVyeRgEIAEoCRILCgNkb2MYBSABKAkiVAoQ",
            "SW5zZXJ0RG9jUmVxdWVzdBITCgtjYWxsYmFja19pZBgBIAEoBRIKCgJkYhgC",
            "IAEoCRISCgpjb2xsZWN0aW9uGAMgASgJEgsKA2RvYxgEIAEoCSJBCgxGaW5k",
            "RG9jUmVwbHkSEwoLY2FsbGJhY2tfaWQYASABKAUSDgoGc3RhdHVzGAIgASgI",
            "EgwKBGRvY3MYAyADKAkiNQoOVXBkYXRlRG9jUmVwbHkSEwoLY2FsbGJhY2tf",
            "aWQYASABKAUSDgoGc3RhdHVzGAIgASgIIkgKDkluc2VydERvY1JlcGx5EhMK",
            "C2NhbGxiYWNrX2lkGAEgASgFEg4KBnN0YXR1cxgCIAEoCBIRCglpbnNlcnRf",
            "aWQYAyABKAky5AIKCklEQlNlcnZpY2USSAoOY29ubmVjdF9zZXJ2ZXISIi5h",
            "bHBoYS5zZXJ2ZXIuQ29ubmVjdFNlcnZlclJlcXVlc3QaEi5hbHBoYS5zZXJ2",
            "ZXIuVm9pZBJBCg5lbnRpdHlfbWVzc2FnZRIbLmFscGhhLnNlcnZlci5FbnRp",
            "dHlNZXNzYWdlGhIuYWxwaGEuc2VydmVyLlZvaWQSPwoLZGJfZmluZF9kb2MS",
            "HC5hbHBoYS5zZXJ2ZXIuRmluZERvY1JlcXVlc3QaEi5hbHBoYS5zZXJ2ZXIu",
            "Vm9pZBJDCg1kYl91cGRhdGVfZG9jEh4uYWxwaGEuc2VydmVyLlVwZGF0ZURv",
            "Y1JlcXVlc3QaEi5hbHBoYS5zZXJ2ZXIuVm9pZBJDCg1kYl9pbnNlcnRfZG9j",
            "Eh4uYWxwaGEuc2VydmVyLkluc2VydERvY1JlcXVlc3QaEi5hbHBoYS5zZXJ2",
            "ZXIuVm9pZDLzAgoQSURCQ2xpZW50U2VydmljZRJFCg1jb25uZWN0X3JlcGx5",
            "EiAuYWxwaGEuc2VydmVyLkNvbm5lY3RTZXJ2ZXJSZXBseRoSLmFscGhhLnNl",
            "cnZlci5Wb2lkEkEKDmVudGl0eV9tZXNzYWdlEhsuYWxwaGEuc2VydmVyLkVu",
            "dGl0eU1lc3NhZ2UaEi5hbHBoYS5zZXJ2ZXIuVm9pZBJDChFkYl9maW5kX2Rv",
            "Y19yZXBseRIaLmFscGhhLnNlcnZlci5GaW5kRG9jUmVwbHkaEi5hbHBoYS5z",
            "ZXJ2ZXIuVm9pZBJHChNkYl91cGRhdGVfZG9jX3JlcGx5EhwuYWxwaGEuc2Vy",
            "dmVyLlVwZGF0ZURvY1JlcGx5GhIuYWxwaGEuc2VydmVyLlZvaWQSRwoTZGJf",
            "aW5zZXJ0X2RvY19yZXBseRIcLmFscGhhLnNlcnZlci5JbnNlcnREb2NSZXBs",
            "eRoSLmFscGhhLnNlcnZlci5Wb2lkQgOQAQFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Alpha.Server.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Alpha.Server.FindDocRequest), global::Alpha.Server.FindDocRequest.Parser, new[]{ "CallbackId", "Db", "Collection", "Query", "Fields", "Limit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Alpha.Server.UpdateDocRequest), global::Alpha.Server.UpdateDocRequest.Parser, new[]{ "CallbackId", "Db", "Collection", "Query", "Doc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Alpha.Server.InsertDocRequest), global::Alpha.Server.InsertDocRequest.Parser, new[]{ "CallbackId", "Db", "Collection", "Doc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Alpha.Server.FindDocReply), global::Alpha.Server.FindDocReply.Parser, new[]{ "CallbackId", "Status", "Docs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Alpha.Server.UpdateDocReply), global::Alpha.Server.UpdateDocReply.Parser, new[]{ "CallbackId", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Alpha.Server.InsertDocReply), global::Alpha.Server.InsertDocReply.Parser, new[]{ "CallbackId", "Status", "InsertId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FindDocRequest : pb::IMessage<FindDocRequest> {
    private static readonly pb::MessageParser<FindDocRequest> _parser = new pb::MessageParser<FindDocRequest>(() => new FindDocRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindDocRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Alpha.Server.ClientMongoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindDocRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindDocRequest(FindDocRequest other) : this() {
      callbackId_ = other.callbackId_;
      db_ = other.db_;
      collection_ = other.collection_;
      query_ = other.query_;
      fields_ = other.fields_;
      limit_ = other.limit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindDocRequest Clone() {
      return new FindDocRequest(this);
    }

    /// <summary>Field number for the "callback_id" field.</summary>
    public const int CallbackIdFieldNumber = 1;
    private int callbackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CallbackId {
      get { return callbackId_; }
      set {
        callbackId_ = value;
      }
    }

    /// <summary>Field number for the "db" field.</summary>
    public const int DbFieldNumber = 2;
    private string db_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Db {
      get { return db_; }
      set {
        db_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 3;
    private string collection_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collection {
      get { return collection_; }
      set {
        collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 4;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 5;
    private string fields_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fields {
      get { return fields_; }
      set {
        fields_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 6;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindDocRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindDocRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallbackId != other.CallbackId) return false;
      if (Db != other.Db) return false;
      if (Collection != other.Collection) return false;
      if (Query != other.Query) return false;
      if (Fields != other.Fields) return false;
      if (Limit != other.Limit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallbackId != 0) hash ^= CallbackId.GetHashCode();
      if (Db.Length != 0) hash ^= Db.GetHashCode();
      if (Collection.Length != 0) hash ^= Collection.GetHashCode();
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (Fields.Length != 0) hash ^= Fields.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallbackId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CallbackId);
      }
      if (Db.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Db);
      }
      if (Collection.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Collection);
      }
      if (Query.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Query);
      }
      if (Fields.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Fields);
      }
      if (Limit != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallbackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallbackId);
      }
      if (Db.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Db);
      }
      if (Collection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
      }
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (Fields.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fields);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindDocRequest other) {
      if (other == null) {
        return;
      }
      if (other.CallbackId != 0) {
        CallbackId = other.CallbackId;
      }
      if (other.Db.Length != 0) {
        Db = other.Db;
      }
      if (other.Collection.Length != 0) {
        Collection = other.Collection;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.Fields.Length != 0) {
        Fields = other.Fields;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CallbackId = input.ReadInt32();
            break;
          }
          case 18: {
            Db = input.ReadString();
            break;
          }
          case 26: {
            Collection = input.ReadString();
            break;
          }
          case 34: {
            Query = input.ReadString();
            break;
          }
          case 42: {
            Fields = input.ReadString();
            break;
          }
          case 48: {
            Limit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateDocRequest : pb::IMessage<UpdateDocRequest> {
    private static readonly pb::MessageParser<UpdateDocRequest> _parser = new pb::MessageParser<UpdateDocRequest>(() => new UpdateDocRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDocRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Alpha.Server.ClientMongoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDocRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDocRequest(UpdateDocRequest other) : this() {
      callbackId_ = other.callbackId_;
      db_ = other.db_;
      collection_ = other.collection_;
      query_ = other.query_;
      doc_ = other.doc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDocRequest Clone() {
      return new UpdateDocRequest(this);
    }

    /// <summary>Field number for the "callback_id" field.</summary>
    public const int CallbackIdFieldNumber = 1;
    private int callbackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CallbackId {
      get { return callbackId_; }
      set {
        callbackId_ = value;
      }
    }

    /// <summary>Field number for the "db" field.</summary>
    public const int DbFieldNumber = 2;
    private string db_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Db {
      get { return db_; }
      set {
        db_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 3;
    private string collection_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collection {
      get { return collection_; }
      set {
        collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 4;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "doc" field.</summary>
    public const int DocFieldNumber = 5;
    private string doc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Doc {
      get { return doc_; }
      set {
        doc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDocRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDocRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallbackId != other.CallbackId) return false;
      if (Db != other.Db) return false;
      if (Collection != other.Collection) return false;
      if (Query != other.Query) return false;
      if (Doc != other.Doc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallbackId != 0) hash ^= CallbackId.GetHashCode();
      if (Db.Length != 0) hash ^= Db.GetHashCode();
      if (Collection.Length != 0) hash ^= Collection.GetHashCode();
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (Doc.Length != 0) hash ^= Doc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallbackId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CallbackId);
      }
      if (Db.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Db);
      }
      if (Collection.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Collection);
      }
      if (Query.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Query);
      }
      if (Doc.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Doc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallbackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallbackId);
      }
      if (Db.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Db);
      }
      if (Collection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
      }
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (Doc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Doc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDocRequest other) {
      if (other == null) {
        return;
      }
      if (other.CallbackId != 0) {
        CallbackId = other.CallbackId;
      }
      if (other.Db.Length != 0) {
        Db = other.Db;
      }
      if (other.Collection.Length != 0) {
        Collection = other.Collection;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.Doc.Length != 0) {
        Doc = other.Doc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CallbackId = input.ReadInt32();
            break;
          }
          case 18: {
            Db = input.ReadString();
            break;
          }
          case 26: {
            Collection = input.ReadString();
            break;
          }
          case 34: {
            Query = input.ReadString();
            break;
          }
          case 42: {
            Doc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsertDocRequest : pb::IMessage<InsertDocRequest> {
    private static readonly pb::MessageParser<InsertDocRequest> _parser = new pb::MessageParser<InsertDocRequest>(() => new InsertDocRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertDocRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Alpha.Server.ClientMongoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertDocRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertDocRequest(InsertDocRequest other) : this() {
      callbackId_ = other.callbackId_;
      db_ = other.db_;
      collection_ = other.collection_;
      doc_ = other.doc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertDocRequest Clone() {
      return new InsertDocRequest(this);
    }

    /// <summary>Field number for the "callback_id" field.</summary>
    public const int CallbackIdFieldNumber = 1;
    private int callbackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CallbackId {
      get { return callbackId_; }
      set {
        callbackId_ = value;
      }
    }

    /// <summary>Field number for the "db" field.</summary>
    public const int DbFieldNumber = 2;
    private string db_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Db {
      get { return db_; }
      set {
        db_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 3;
    private string collection_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collection {
      get { return collection_; }
      set {
        collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "doc" field.</summary>
    public const int DocFieldNumber = 4;
    private string doc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Doc {
      get { return doc_; }
      set {
        doc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertDocRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertDocRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallbackId != other.CallbackId) return false;
      if (Db != other.Db) return false;
      if (Collection != other.Collection) return false;
      if (Doc != other.Doc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallbackId != 0) hash ^= CallbackId.GetHashCode();
      if (Db.Length != 0) hash ^= Db.GetHashCode();
      if (Collection.Length != 0) hash ^= Collection.GetHashCode();
      if (Doc.Length != 0) hash ^= Doc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallbackId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CallbackId);
      }
      if (Db.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Db);
      }
      if (Collection.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Collection);
      }
      if (Doc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Doc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallbackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallbackId);
      }
      if (Db.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Db);
      }
      if (Collection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
      }
      if (Doc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Doc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertDocRequest other) {
      if (other == null) {
        return;
      }
      if (other.CallbackId != 0) {
        CallbackId = other.CallbackId;
      }
      if (other.Db.Length != 0) {
        Db = other.Db;
      }
      if (other.Collection.Length != 0) {
        Collection = other.Collection;
      }
      if (other.Doc.Length != 0) {
        Doc = other.Doc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CallbackId = input.ReadInt32();
            break;
          }
          case 18: {
            Db = input.ReadString();
            break;
          }
          case 26: {
            Collection = input.ReadString();
            break;
          }
          case 34: {
            Doc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FindDocReply : pb::IMessage<FindDocReply> {
    private static readonly pb::MessageParser<FindDocReply> _parser = new pb::MessageParser<FindDocReply>(() => new FindDocReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindDocReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Alpha.Server.ClientMongoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindDocReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindDocReply(FindDocReply other) : this() {
      callbackId_ = other.callbackId_;
      status_ = other.status_;
      docs_ = other.docs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindDocReply Clone() {
      return new FindDocReply(this);
    }

    /// <summary>Field number for the "callback_id" field.</summary>
    public const int CallbackIdFieldNumber = 1;
    private int callbackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CallbackId {
      get { return callbackId_; }
      set {
        callbackId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private bool status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "docs" field.</summary>
    public const int DocsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_docs_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> docs_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Docs {
      get { return docs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindDocReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindDocReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallbackId != other.CallbackId) return false;
      if (Status != other.Status) return false;
      if(!docs_.Equals(other.docs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallbackId != 0) hash ^= CallbackId.GetHashCode();
      if (Status != false) hash ^= Status.GetHashCode();
      hash ^= docs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallbackId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CallbackId);
      }
      if (Status != false) {
        output.WriteRawTag(16);
        output.WriteBool(Status);
      }
      docs_.WriteTo(output, _repeated_docs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallbackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallbackId);
      }
      if (Status != false) {
        size += 1 + 1;
      }
      size += docs_.CalculateSize(_repeated_docs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindDocReply other) {
      if (other == null) {
        return;
      }
      if (other.CallbackId != 0) {
        CallbackId = other.CallbackId;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
      docs_.Add(other.docs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CallbackId = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadBool();
            break;
          }
          case 26: {
            docs_.AddEntriesFrom(input, _repeated_docs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateDocReply : pb::IMessage<UpdateDocReply> {
    private static readonly pb::MessageParser<UpdateDocReply> _parser = new pb::MessageParser<UpdateDocReply>(() => new UpdateDocReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDocReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Alpha.Server.ClientMongoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDocReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDocReply(UpdateDocReply other) : this() {
      callbackId_ = other.callbackId_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDocReply Clone() {
      return new UpdateDocReply(this);
    }

    /// <summary>Field number for the "callback_id" field.</summary>
    public const int CallbackIdFieldNumber = 1;
    private int callbackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CallbackId {
      get { return callbackId_; }
      set {
        callbackId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private bool status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDocReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDocReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallbackId != other.CallbackId) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallbackId != 0) hash ^= CallbackId.GetHashCode();
      if (Status != false) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallbackId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CallbackId);
      }
      if (Status != false) {
        output.WriteRawTag(16);
        output.WriteBool(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallbackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallbackId);
      }
      if (Status != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDocReply other) {
      if (other == null) {
        return;
      }
      if (other.CallbackId != 0) {
        CallbackId = other.CallbackId;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CallbackId = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsertDocReply : pb::IMessage<InsertDocReply> {
    private static readonly pb::MessageParser<InsertDocReply> _parser = new pb::MessageParser<InsertDocReply>(() => new InsertDocReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertDocReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Alpha.Server.ClientMongoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertDocReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertDocReply(InsertDocReply other) : this() {
      callbackId_ = other.callbackId_;
      status_ = other.status_;
      insertId_ = other.insertId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertDocReply Clone() {
      return new InsertDocReply(this);
    }

    /// <summary>Field number for the "callback_id" field.</summary>
    public const int CallbackIdFieldNumber = 1;
    private int callbackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CallbackId {
      get { return callbackId_; }
      set {
        callbackId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private bool status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "insert_id" field.</summary>
    public const int InsertIdFieldNumber = 3;
    private string insertId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InsertId {
      get { return insertId_; }
      set {
        insertId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertDocReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertDocReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallbackId != other.CallbackId) return false;
      if (Status != other.Status) return false;
      if (InsertId != other.InsertId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallbackId != 0) hash ^= CallbackId.GetHashCode();
      if (Status != false) hash ^= Status.GetHashCode();
      if (InsertId.Length != 0) hash ^= InsertId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallbackId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CallbackId);
      }
      if (Status != false) {
        output.WriteRawTag(16);
        output.WriteBool(Status);
      }
      if (InsertId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InsertId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallbackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallbackId);
      }
      if (Status != false) {
        size += 1 + 1;
      }
      if (InsertId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InsertId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertDocReply other) {
      if (other == null) {
        return;
      }
      if (other.CallbackId != 0) {
        CallbackId = other.CallbackId;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
      if (other.InsertId.Length != 0) {
        InsertId = other.InsertId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CallbackId = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadBool();
            break;
          }
          case 26: {
            InsertId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
