# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: echo_test.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import service as _service
from google.protobuf import service_reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='echo_test.proto',
  package='alpha.test',
  syntax='proto3',
  serialized_pb=_b('\n\x0f\x65\x63ho_test.proto\x12\nalpha.test\"\x06\n\x04Void\"\x1d\n\x0eRequestMessage\x12\x0b\n\x03msg\x18\x01 \x01(\t\"\x1e\n\x0fResponseMessage\x12\x0b\n\x03msg\x18\x01 \x01(\t2D\n\x0cIEchoService\x12\x34\n\x04\x65\x63ho\x12\x1a.alpha.test.RequestMessage\x1a\x10.alpha.test.Void2J\n\x0bIEchoClient\x12;\n\necho_reply\x12\x1b.alpha.test.ResponseMessage\x1a\x10.alpha.test.VoidB\x03\x90\x01\x01\x62\x06proto3')
)




_VOID = _descriptor.Descriptor(
  name='Void',
  full_name='alpha.test.Void',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=31,
  serialized_end=37,
)


_REQUESTMESSAGE = _descriptor.Descriptor(
  name='RequestMessage',
  full_name='alpha.test.RequestMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='msg', full_name='alpha.test.RequestMessage.msg', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=39,
  serialized_end=68,
)


_RESPONSEMESSAGE = _descriptor.Descriptor(
  name='ResponseMessage',
  full_name='alpha.test.ResponseMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='msg', full_name='alpha.test.ResponseMessage.msg', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=70,
  serialized_end=100,
)

DESCRIPTOR.message_types_by_name['Void'] = _VOID
DESCRIPTOR.message_types_by_name['RequestMessage'] = _REQUESTMESSAGE
DESCRIPTOR.message_types_by_name['ResponseMessage'] = _RESPONSEMESSAGE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Void = _reflection.GeneratedProtocolMessageType('Void', (_message.Message,), dict(
  DESCRIPTOR = _VOID,
  __module__ = 'echo_test_pb2'
  # @@protoc_insertion_point(class_scope:alpha.test.Void)
  ))
_sym_db.RegisterMessage(Void)

RequestMessage = _reflection.GeneratedProtocolMessageType('RequestMessage', (_message.Message,), dict(
  DESCRIPTOR = _REQUESTMESSAGE,
  __module__ = 'echo_test_pb2'
  # @@protoc_insertion_point(class_scope:alpha.test.RequestMessage)
  ))
_sym_db.RegisterMessage(RequestMessage)

ResponseMessage = _reflection.GeneratedProtocolMessageType('ResponseMessage', (_message.Message,), dict(
  DESCRIPTOR = _RESPONSEMESSAGE,
  __module__ = 'echo_test_pb2'
  # @@protoc_insertion_point(class_scope:alpha.test.ResponseMessage)
  ))
_sym_db.RegisterMessage(ResponseMessage)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\220\001\001'))

_IECHOSERVICE = _descriptor.ServiceDescriptor(
  name='IEchoService',
  full_name='alpha.test.IEchoService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=102,
  serialized_end=170,
  methods=[
  _descriptor.MethodDescriptor(
    name='echo',
    full_name='alpha.test.IEchoService.echo',
    index=0,
    containing_service=None,
    input_type=_REQUESTMESSAGE,
    output_type=_VOID,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_IECHOSERVICE)

DESCRIPTOR.services_by_name['IEchoService'] = _IECHOSERVICE


_IECHOCLIENT = _descriptor.ServiceDescriptor(
  name='IEchoClient',
  full_name='alpha.test.IEchoClient',
  file=DESCRIPTOR,
  index=1,
  options=None,
  serialized_start=172,
  serialized_end=246,
  methods=[
  _descriptor.MethodDescriptor(
    name='echo_reply',
    full_name='alpha.test.IEchoClient.echo_reply',
    index=0,
    containing_service=None,
    input_type=_RESPONSEMESSAGE,
    output_type=_VOID,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_IECHOCLIENT)

DESCRIPTOR.services_by_name['IEchoClient'] = _IECHOCLIENT

IEchoService = service_reflection.GeneratedServiceType('IEchoService', (_service.Service,), dict(
  DESCRIPTOR = _IECHOSERVICE,
  __module__ = 'echo_test_pb2'
  ))

IEchoService_Stub = service_reflection.GeneratedServiceStubType('IEchoService_Stub', (IEchoService,), dict(
  DESCRIPTOR = _IECHOSERVICE,
  __module__ = 'echo_test_pb2'
  ))


IEchoClient = service_reflection.GeneratedServiceType('IEchoClient', (_service.Service,), dict(
  DESCRIPTOR = _IECHOCLIENT,
  __module__ = 'echo_test_pb2'
  ))

IEchoClient_Stub = service_reflection.GeneratedServiceStubType('IEchoClient_Stub', (IEchoClient,), dict(
  DESCRIPTOR = _IECHOCLIENT,
  __module__ = 'echo_test_pb2'
  ))


# @@protoc_insertion_point(module_scope)
